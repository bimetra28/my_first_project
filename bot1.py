import telebot
import requests
import psycopg2
from telebot import types
from geopy import geocoders
from deep_translator import GoogleTranslator
from config import *

bot = telebot.TeleBot(api_bot)

connection = psycopg2.connect(
    host=host,
    user=user,
    password=password,
    database=db_name
)
connection.autocommit = True


def city_setting(message):
    if message.text == '/start' or message.text == '–ì–æ—Ä–æ–¥' or message.text == '–≥–æ—Ä–æ–¥' or message.text == '/city' or message.text == '/weather' or message.text == '/time':
        msg = bot.send_message(message.chat.id,
                               "–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —è –Ω–µ –∑–Ω–∞—é, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(msg, finally_city)
    else:
        try:
            en_city_name = GoogleTranslator(source='ru', target='en').translate(message.text)
            geolocator = geocoders.Nominatim(user_agent="telebot")
            latitude = str(geolocator.geocode(en_city_name).latitude)
            longitude = str(geolocator.geocode(en_city_name).longitude)
            try:
                with connection.cursor() as cursor:
                    cursor.execute(
                        "INSERT INTO users_data (users_id, city, latitude, longitude) VALUES (%s, %s, %s, %s)",
                        (message.from_user.id, message.text.capitalize(), latitude, longitude)
                    )
            except:
                with connection.cursor() as cursor:
                    cursor.execute(
                        "UPDATE users_data SET city = %s, latitude = %s, longitude = %s WHERE users_id = %s",
                        (message.text.capitalize(), latitude, longitude, message.from_user.id)
                    )
            bot.send_message(message.chat.id,
                             f'–•–æ—Ä–æ—à–æ, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {message.text.capitalize()}.',
                             parse_mode='html')
        except:
            msg = bot.send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(msg, finally_city)


@bot.message_handler(commands=['start'])
def start(message):
    msg = bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, <b>{message.from_user.first_name} {message.from_user.last_name}</b>!\n'
                                            '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏), –∞ —Ç–∞–∫–∂–µ –≤ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ.\n'
                                            '–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 2 –¥–µ–π—Å—Ç–≤–∏—è:\n'
                                            '- –í–æ-–ø–µ—Ä–≤—ã—Ö, <u>–Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥</u>, –ø–æ–≥–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞. –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞', parse_mode='html')
    bot.register_next_step_handler(msg, first_city_setting)

def first_city_setting(message):
    city_setting(message)
    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT time FROM users_data WHERE users_id = %s", (message.from_user.id,)
        )
        data = cursor.fetchone()
        if None in data:
            msg = bot.send_message(message.chat.id,
                                   '- –í–æ-–≤—Ç–æ—Ä—ã—Ö, <u>—É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è</u>, –≤ –∫–æ—Ç–æ—Ä–æ–µ —è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã. '
                                   '–ü—Ä–∏–º–µ—Ä: 07:00, 22:33 \n'
                                   '–ï—Å–ª–∏ –∂–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –Ω–µ —Ö–æ—á–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ \'—Å—Ç–æ–ø\' (–∫—Ä–∞–π–Ω–µ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!!!)',
                                   parse_mode='html')
            bot.register_next_step_handler(msg, set_time)


@bot.message_handler(commands=['city'])
def city(message):
    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT city FROM users_data WHERE users_id = %s", (message.from_user.id,)
        )
        data = cursor.fetchone()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('\U0001F44D –ë—ã–ª–æ –±—ã –Ω–µ–ø–ª–æ—Ö–æ')
    button2 = types.KeyboardButton('\U0001F645 –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ')
    markup.add(button1, button2)
    bot.send_message(message.chat.id,
                     f'–ö–∞–∂–¥—ã–π —Ä–∞–∑ —è —Å–º–æ—Ç—Ä—é –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {data[0]}. –•–æ—Ç–µ–ª–∏ –±—ã –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)


def finally_city(message):
    city_setting(message)


@bot.message_handler(commands=['time'])
def time(message):
    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT time FROM users_data WHERE users_id = %s", (message.from_user.id,)
        )
        data = cursor.fetchone()
    if None in data:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('\U0001F44D –ö–æ–Ω–µ—á–Ω–æ –∂–µ –¥–∞')
        button2 = types.KeyboardButton('\U0001F645 –ü–æ–∂–∞–ª—É–π –Ω–µ —Å—Ç–æ–∏—Ç')
        markup.add(button1, button2)
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –•–æ—Ç–µ–ª–∏ –±—ã –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        button1 = types.KeyboardButton('\U0001F44D –ö–æ–Ω–µ—á–Ω–æ –∂–µ –¥–∞')
        button2 = types.KeyboardButton('\U0001F645 –ü–æ–∂–∞–ª—É–π –Ω–µ —Å—Ç–æ–∏—Ç')
        button3 = types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é')
        markup.add(button1, button2, button3)
        bot.send_message(message.chat.id,
                         f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {data[0]}. –•–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=markup)


def set_time(message):
    try:
        if message.text == '—Å—Ç–æ–ø' or message.text == '–°—Ç–æ–ø':
            bot.send_message(message.chat.id, '–ù–µ –æ—á–µ–Ω—å —Ç–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å —á—Ç–æ-—Ç–æ –º–µ–Ω—è—Ç—å \U0001F611')

        elif (0 <= int(message.text[0:2]) <= 23 or message.text[0:2] == '00')\
            and (0 <= int(message.text[3:5]) <= 59 or message.text[3:5] == '00'):
            try:
                with connection.cursor() as cursor:
                    cursor.execute(
                        "INSERT INTO users_data (time) VALUES (%s) WHERE users_id = %s", (message.text, message.from_user.id)
                    )
            except:
                with connection.cursor() as cursor:
                    cursor.execute(
                        "UPDATE users_data SET time = %s WHERE users_id = %s", (message.text, message.from_user.id)
                    )
            bot.send_message(message.chat.id,
                             f'–û—Ç–ª–∏—á–Ω–æ! –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–≤–æ–¥–∫—É –≤ {message.text}')
        else:
            msg = bot.send_message(message.chat.id,
                                   '–í—Ä–µ–º—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –ü—Ä–∏–º–µ—Ä: 22:34. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ \'—Å—Ç–æ–ø\'')
            bot.register_next_step_handler(msg, set_time)
    except:
        msg = bot.send_message(message.chat.id,
                               '–í—Ä–µ–º—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –ü—Ä–∏–º–µ—Ä: 22:34. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ \'—Å—Ç–æ–ø\'')
        bot.register_next_step_handler(msg, set_time)

@bot.message_handler(commands=['weather'])
def weather(message):
    condition = {
        'clear': '—è—Å–Ω–æ \U00002600', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ \U00002601',
        'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ \U00002601',
        'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ \U00002601', 'drizzle': '–º–æ—Ä–æ—Å—å \U00002614', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å \U00002614',
        'rain': '–¥–æ–∂–¥—å \U00002614', 'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω–æ-—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å \U00002614',
        'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å \U00002614',
        'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å \U00002614', 'showers': '–ª–∏–≤–µ–Ω—å \U00002614',
        'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º \U00002614', 'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ \U0001F328', 'snow': '—Å–Ω–µ–≥ \U0001F328',
        'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥ \U0001F328', 'hail': '–≥—Ä–∞–¥ \U0001F328', 'thunderstorm': '–≥—Ä–æ–∑–∞ \U000026A1',
        'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π \U000026A1', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º \U000026A1'
    }
    wind_dir = {
        'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
                'se': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', '—Å': '—à—Ç–∏–ª—å'
    }
    part_name = {
        'night': '\U0001F31B –ù–æ—á—å—é', 'morning': 'üåÖ –£—Ç—Ä–æ–º', 'day': '\U0001F31E –î–Ω—ë–º', 'evening': 'üåá –í–µ—á–µ—Ä–æ–º'
    }

    try:
        try:
            with connection.cursor() as cursor:
                cursor.execute(
                    "SELECT city, latitude, longitude FROM users_data WHERE users_id = %s", (message.from_user.id,)
                )
                database_data = cursor.fetchone()
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.')
        except:
            bot.send_message(message.chat.id, '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        site = f'https://api.weather.yandex.ru/v2/informers?lat={database_data[1]}&lon={database_data[2]}&lang=ru_RU'
        r = requests.get(site, headers={'X-Yandex-API-Key': api_weather})
        data = r.json()
        cur_temp = data['fact']['temp']
        feels_like = data['fact']['feels_like']
        ws = data['fact']['wind_speed']
        wd = data['fact']['wind_dir']
        sunrise = data['forecast']['sunrise']
        sunset = data['forecast']['sunset']
        cond = data['fact']['condition']
        fact_pres = data['fact']['pressure_mm']
        first_part = data['forecast']['parts'][0]['part_name']
        fp_max_temp = data['forecast']['parts'][0]['temp_max']
        fp_min_temp = data['forecast']['parts'][0]['temp_min']
        fp_cond = data['forecast']['parts'][0]['condition']
        fp_prec_prob = data['forecast']['parts'][0]['prec_prob']
        fp_wind_speed = data['forecast']['parts'][0]['wind_speed']
        fp_wind_dir = data['forecast']['parts'][0]['wind_dir']
        fp_pressure = data['forecast']['parts'][0]['pressure_mm']
        sec_part = data['forecast']['parts'][1]['part_name']
        sp_max_temp = data['forecast']['parts'][1]['temp_max']
        sp_min_temp = data['forecast']['parts'][1]['temp_min']
        sp_cond = data['forecast']['parts'][1]['condition']
        sp_prec_prob = data['forecast']['parts'][1]['prec_prob']
        sp_wind_speed = data['forecast']['parts'][1]['wind_speed']
        sp_wind_dir = data['forecast']['parts'][1]['wind_dir']
        sp_pressure = data['forecast']['parts'][1]['pressure_mm']
        text = f'   –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {database_data[0]} {cur_temp}¬∞–° (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞–°), {condition[cond]}.\n' \
               f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {ws} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {wind_dir[wd]}\n' \
               f'–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–≤–Ω—è–µ—Ç—Å—è {fact_pres} –º–º —Ä—Ç.—Å—Ç.\n\n' \
               f'   –í–æ—Å—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è –≤ {sunrise}, –∑–∞–∫–∞—Ç –≤ {sunset}.\n\n' \
               f'   {part_name[first_part]} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –¥–æ {fp_max_temp}¬∞–°, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∏—Ç {fp_min_temp}¬∞–°, {condition[fp_cond]}\n' \
               f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ {fp_prec_prob}%\n' \
               f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {fp_wind_speed} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {wind_dir[fp_wind_dir]}\n' \
               f'–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∏—Ç {fp_pressure} –º–º —Ä—Ç.—Å—Ç.\n\n' \
               f'   {part_name[sec_part]} —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –¥–æ {sp_max_temp}¬∞–°, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∏—Ç {sp_min_temp}¬∞–°, {condition[sp_cond]}\n' \
               f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –æ—Å–∞–¥–∫–æ–≤ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ {sp_prec_prob}%\n' \
               f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {sp_wind_speed} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {sp_wind_dir}\n' \
               f'–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∏—Ç {sp_pressure} –º–º —Ä—Ç.—Å—Ç.\n'
        bot.send_message(message.chat.id, text)
    except:
        bot.send_message(message.chat.id, '–ö–∞–∂–µ—Ç—Å—è —Å–æ —Å–≤–æ–¥–∫–æ–π –ø–æ–≥–æ–¥—ã –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –î–∏–º–µ.')

@bot.message_handler(content_types=['text'])
def text(message):
    if message.text == '–≥–æ—Ä–æ–¥' or message.text == '–ì–æ—Ä–æ–¥':
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–≥–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞.")
        bot.register_next_step_handler(msg, finally_city)

    elif message.text == '–ø–æ–≥–æ–¥–∞' or message.text == '–ü–æ–≥–æ–¥–∞':
        weather(message)

    elif message.text == '—Ç–µ—Å—Ç':
        bot.send_message(message.chat.id, message)

    elif message.text == '\U0001F44D –ö–æ–Ω–µ—á–Ω–æ –∂–µ –¥–∞':
        msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –ø–æ–≥–æ–¥—ã. '
                                                '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ \'—Å—Ç–æ–ø\' –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, set_time)

    elif message.text == '\U0001F645 –ü–æ–∂–∞–ª—É–π –Ω–µ —Å—Ç–æ–∏—Ç':
        bot.send_message(message.chat.id, '–ù—É—É—É... –ù–∞ –Ω–µ—Ç –∏ —Å—É–¥–∞ –Ω–µ—Ç \U0001F611', reply_markup=types.ReplyKeyboardRemove())

    elif message.text == '–û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é':
        with connection.cursor() as cursor:
            cursor.execute(
                "UPDATE users_data SET time = Null WHERE users_id = %s", (message.from_user.id,)
            )
        bot.send_message(message.chat.id, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ \U00002705', reply_markup=types.ReplyKeyboardRemove())

    elif message.text == '\U0001F44D –ë—ã–ª–æ –±—ã –Ω–µ–ø–ª–æ—Ö–æ':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–≥–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, finally_city)

    elif message.text == '\U0001F645 –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ':
        bot.send_message(message.chat.id, '–Ø –±—ã –Ω–∞ –≤–∞—à–µ–º –º–µ—Å—Ç–µ –ø–æ–¥—É–º–∞–ª –æ —Ç–æ–º, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥... –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è \U0001F605', reply_markup=types.ReplyKeyboardRemove())


if __name__ == '__main__':
    bot.polling(none_stop=True)